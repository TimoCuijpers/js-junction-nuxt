export default filterMixin;
declare namespace filterMixin {
    export function count(relations: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function limit(amount: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function order(input: any, direction?: string): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    function _with(relations: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export { _with as with };
    export function scope(name: any, ...params: any[]): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function scopes(input: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function search(value: any, columns?: any[]): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function where(column: any, operator: any, value: any, ...args: any[]): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function wheres(input: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function whereIn(column: any, values: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function whereIns(input: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function whereNotIn(column: any, values: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function whereNotIns(input: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
    export function pluck(fields: any): {
        count(relations: any): /*elided*/ any;
        limit(amount: any): /*elided*/ any;
        order(input: any, direction?: string): /*elided*/ any;
        with(relations: any): /*elided*/ any;
        scope(name: any, ...params: any[]): /*elided*/ any;
        scopes(input: any): /*elided*/ any;
        search(value: any, columns?: any[]): /*elided*/ any;
        where(column: any, operator: any, value: any, ...args: any[]): /*elided*/ any;
        wheres(input: any): /*elided*/ any;
        whereIn(column: any, values: any): /*elided*/ any;
        whereIns(input: any): /*elided*/ any;
        whereNotIn(column: any, values: any): /*elided*/ any;
        whereNotIns(input: any): /*elided*/ any;
        pluck(fields: any): /*elided*/ any;
    };
}
